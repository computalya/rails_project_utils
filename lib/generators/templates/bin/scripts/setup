#!/usr/bin/env ruby
require "fileutils"
require 'dotenv'

ENV_FILE = File.expand_path("../../docker-dev/.env", __dir__)
Dotenv.load(ENV_FILE)
COMPOSE_PROJECT_NAME = ENV['COMPOSE_PROJECT_NAME']

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  log "Executing #{args}"

  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

def log(message)
  puts "[bin/app/setup] #{message}"
end

def help
  log "Useful commands:"
  log ""
  log "  bin/app/run"
  log "    # run app locally"
  log ""

  log " LOGRAGE_IN_DEVELOPMENT=true bin/app/run"
  log "     # run app locally using"
  log "     # production-like logging"
  log ""

  log "  bin/app/ci"
  log "    # runs all tests and checks as CI would"
  log ""
  log "  bin/rails test"
  log "    # run non-system tests"
  log ""
  log "  bin/rails test:system"
  log "    # run system tests"
  log ""
  log "  bin/app/setup help"
  log "    # show this help"
end

def remove_volume(volume_name)
  result = `docker volume inspect #{volume_name} 2>&1`

  if $?.success?
    system! "docker volume rm #{volume_name}"
  end
end

def docker
  # run only on development environment
  unless `rails runner 'Rails.env.development?'`
    # exit setup if Docker Desktop is not running
    system! "docker info >/dev/null 2>&1 && echo 'Docker is running' || (echo 'Docker is not running' && exit 1)"
  end

  # before removing volumes stop docker
  result = `docker ps --filter "label=com.docker.compose.project=#{COMPOSE_PROJECT_NAME}" 2>&1`
  if $?.success?
    system! "cd ../ && bin/scripts/dockerdown"
  end

  remove_volume("#{COMPOSE_PROJECT_NAME}_pg-data")
  remove_volume("#{COMPOSE_PROJECT_NAME}_redis-data")

  system! "cd ../ && bin/scripts/dockerup"
end

def setup
  log "Docker checks"
  docker

  current_folder = Dir.getwd
  puts "Current folder: #{current_folder}"

  log "Installing dependencies"
  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system("bundle check") || system!("bundle install")

  log "Dropping & recreating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate

  system! "rails db:reset || rails db:migrate"

  log "Dropping & recreating the test database"
  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ "RAILS_ENV" => "test" }, "rails db:reset")

  log "Removing old logs and tempfiles"
  system! "rails log:clear tmp:clear"

  log "Removing tmp/storage_fixtures"
  system! "rm -rf tmp/storage_fixtures"

  log "Removing assets"
  system! "rails assets:clean"
  system! "rails assets:clobber"

  log "precompiling assets"
  system! "rails assets:precompile"

  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "    bin/run"
  log ""
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  if ARGV[0] == "help"
    help
  else
    setup
  end

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end
end
